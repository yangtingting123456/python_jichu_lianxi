#函数嵌套
#1.在函数内部调用其它函数。
eg:
def pri():
    print('我是pri方法')

def test():
    pri()

test()

#2.在函数内部再定义一个函数（不常见）。
eg:
def pri2():
    def pri3():   #只能在当前方法中使用
        print('我的pri3函数')
        pri3)

pri2()

结果：我的pri3函数


函数递归：在函数嵌套调用其它函数时，有一种特殊情况，就是直接或间接地调用了函数本身，这样一种情况称为函数的递归。
eg：sum = 0
    def pri():
        sum +=1
        print('我是pri函数')
        pri()
        print(sum)

pri()

运行结果：代码报错

python在递归中没有像别的语言对递归进行优化，所以他的每一次调用多会基于上一次调用进行，并且它设置了最大的递归数量防止递归外溢
eg： def num(n):
         if n ==1:
            returen 1
         returen num(n-1)+2
         print(num(5))
递推：如上例，递归每一次都是基于上一次进行下一次的执行，这叫做递推
回溯：则是遇到终止条件，则从最后往回返一级一级的把值返回来，这叫做回溯。
eg：手动输入一个n，循环打印出n次hello world，使用递归的方式实现
    def pri(n):
        if n>0:
            print('hello world')
            pri(n-1)
        else:
             pass

    n1 = int(input('手动输入一个数字:') )
    pri(n1)

匿名函数：用lambda关键字能创建小型匿名函数，种种函数得名于省略了用def申明函数的标准步骤。
Lambde函数能接收任何数量的参数但只能返回一个表达式的值，同事不能包含命令或多个表达式。
匿名函数不能直接调用print，因为lamdba需要一个表达式。
lamdba函数拥有自己的名字空间，且不能访问自有参数列表职位或全局名字空间里的参数。
虽然lamdba函数看起来只能写一行，却不等同于c++或c的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率
语法：函数名称 = lamdba 参数列表：返回表达式
eg：  sum landba a,b:a+b
      sum(3,5)
      运行结果：8


内置函数：python内置函数就是python标准库里（语言自身携带的）函数（公共函数），一般各种编程语言都会预定义常见的内置函数，因为内置函数使用
比较频繁，所以通过内置函数的形式提供出来。
python中内置函数大致包含如下类型：
数学运算、类型转换、序列操作、对象操作、反射操作
变量操作，交互操作，文件操作、编译操作、装饰器
比如：
类型转换：int()  float()  str()
序列操作：sorted() reversed() next()
交互操作：print()  input()等




