'''
@File : day02_02.py
@Time : 2021/1/31 09:36
@Author: luoman
'''
# import lib
"""
算术运算符
赋值运算符
关系运算符
逻辑运算符
位运算符
三元运算符
身份运算符
成员运算符
"""
# 1、算术运算 + - *  /  //  % --取模运算  **
a = 10
b = 2
c = 4
print(a/b) # 除法运算得到的数据是 浮点型的数

print(a//b) # 整除的话才得到的是整数,只取整数部分 2.5 ==>2

print(a//c)
print(a % b) # 取模运算一般是用来判断一个数能不能被另一个数 整除 的
print(a ** b)

# 赋值运算 = ：是从右往左进行运算的,只能通过了赋值运算，变量的值才会发生改变
d = a + b
a = b
# 赋值运算与算术运算进行结合

a += b #  ===> a = a + b
'''
a=a-b---》a-=b
a*=b   a/=b  a//=b a**=b a%=b
'''
print('a=', a)

# 列表中的赋值形式
'''
list01 = list02  # 传地址
list01 = list02[:] # 值传递
'''

# 关系运算符  == 相等  != 不相等  >  <  >= <=
# 关系运算结果是：bool值 ---->True  False
print(a == b)
n = 5
k = 6
print(n > k)
print(n < k)
# 二元运算符--->两个表达式(数)参与运算
# 逻辑运算符  not-->非
print('not运算符:', not True)
print('not运算符:', not -2)  # not运算中，除0，其他的数都看True
print('not运算符:', not 0)  # not运算中，除0以外-->0表示False，其他的数都看True
# and--->与:两个表达式有一个为假，结果为假
print('与运算：', True and True)
print('与运算：', False and True)
print('与运算：', True and False)
print('and的短路运算:', False and 2)
print('and的短路运算:', True and 2)   # 如果左边的值，为False，则整个运算取左边的值，如果左边的结果为True，则整个运算取右边的值
# or --->或:  只要有一个为真，结果为真
print('或运算：', True or True)
print('或运算：', False or True)
print('或运算：', True or False)
print('或运算：', False or False)
print('or的短路运算:', False or 2)
print('or的短路运算:', True or 2)  # 如果左边的值，为True，则整个运算取左边的值，如果左边的结果为False，则整个运算取右边的值

# 位运算：参与位运算---都要把数据转换成二进制 再进行计算  ----只有 0 1
'''&: 1&1==1'''
print('10&5的结果:', 10 & 5)   # 结果:0
'''
10----->  00001010
 5----->  00000101
 --------------------
          00000000
'''
'''|:有1参与或，那么结果为1'''
print('10|5的结果:',10 | 5)  # 结果为:15
'''
10----->  00001010
 5----->  00000101
 --------------------
          00001111
'''
'''^ :按位异或 相异为1，相同为0
'''
print('10^5的结果:', 10 ^ 5)  # 结果为:15
'''
10----->  00001010
 5----->  00000101
 --------------------
          00001111
'''
'''~ : ~X ---> -(x)-1'''
print('~10的结束:', ~10)
'''>>:右位移:x去整除2的n次方 <<:左位移：x乘以2的n次方'''
print('10<<2的结果:', 10 << 2)  # 10*4
print('5>>3的结果:', 5 >> 3)   # 5//8
'''
10----->  00001010
 --------------------
          00101000   ===40  
 5----->  00000101
 --------------------
          00000000   ====0
'''
# 三元运算符: 三个表达式参与运算
# ...if 表达式 else..
# 如果if后面的表达式为真，则取if前面的值作为整个运算的值，如果if后面的表达式结果为假，则取else后面的值作为整个表达式的值
print('三元运算符：', 5 if 10 > 5 else 10)
#  成员运算符：in,not in --是序列中是用来判断某个元素是否存在的
print('s' in 'hello')
print('s' not in 'hello')
# is 是身份运算符:判断两个标识符是不是引用自一个对象
# 除可变数据类型外，只要变量的值是相同的，可以认为他们引用自同一个对象
aa = 'A'
bb = 'B'
cc = 'A'
print(aa is bb)
print(aa is cc)
i = 2
j = 2
print(i is j)
'''
java 
  if a==1{
    输出yes
    输出a
  }
python
   if a==1
     输出yes
     输出a

'''













