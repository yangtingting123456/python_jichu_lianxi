   函数
概念：组织好的，重复应用
作用：提高应用的模块性，，可以被用户调用
语法：
def  函数名称（参数列表）：
     语句块
调用：函数名（参数列表）
1.参数可以0个多个，0个称为无参函数，1个到多个参数，称为多参函数。
2.return函数可选，可以出现在函数任意地方。遇到return 就执行结束。加入函数没有return，则默认返回none，
假如return后面没有表达式或值也会默认返回none
3.python中采用def定义函数，不用指定返回类型。

形参和实参
eg：
def add(a,b):  #这里的a，b是形参
    return a+b

add(3,5)  #这里的3,5是实参

参数传递：
不可变类型：整型、字符串、字典、元素。
可变类型：列表，字典，集合
def add(a,b):
    return a+b
add(3,5)

def test_list(mylist):
    print(mylist)
    mylist.append([1,2,3])
    print(mylist)
    return mylist
list1 = [2,3,5]
test_list(list1)

作用域：在python中程序创建，改变，查找变量名，都是在一个保存变量名的空间进行，我们称为命名空间，也称为作用域。python的作用域是静态的，在源代码中
变量名被赋值的位置决定了该变量能被防范的范围。即python变量的作用域所在源代码职工的位置决定。

作用域类型：局部优先
局部作用域在函数内部定义，
嵌套作用域在函数内部定义，
全局作用域在函数外部定义，
内置作用域在系统中定义
eg:
name = '曹超'

def test():
    # name = '关羽'
    global name
    print('我是三国的%s'%name)
注意：当name没有被注释，打印的结果是‘关羽’，#name注释了，则打印的是‘曹超’
作用域是相对的，都只在局部生效，局部优先

a=10  #全局作用域
def pri():
    a=20   #嵌套作用域
    def pri2():  #函数中嵌套是，相当于是局部函数，只能在pri函数中使用
        a = 30  #局部作用域
        print(a)
    pri2()
    print(a)
print(a)
pri().pri2()
#打印的结果是10,30,20

内置作用域（内置变量）：python中自带的变量
print(vars())  #查看内置变量
print(__str__)   #打印当前文件的编码格式
print(__file__)  #打印当前文件的路径

局部作用域>嵌套作用域>全局作用域>内置作用域

函数参数：缺省参数（默认参数），关键字参数，必备参数，任意参数
1，必备参数：传参的顺序和个数不能变
def info(name,age)
    print('我叫%s，今年%d岁'%(name,age))
info(23,'小红')

运行结果：报错，类型

2,关键字参数，传参的顺序是可以改变的,
假如有多个参数，从哪个参数开始赋值，其后面的参数也必须使用参数赋值的方式进行赋值。
def info(name,age)
    print('我叫%s，今年%d岁'%(name,age))
info(age=23,name='小红')

3.缺省参数：未传参的时候参数要必须有默认值。
def info(name='小红',age)
    print('我叫%s，今年%d岁'%(name,age))
info(age=23)

4.任意个参数
* 表示将没有匹配的值都放在同一个元组职工
* *   表示将没有匹配的值都放在一个dictionary中
eg:  def pri(name,*test_tuple):
         print(name)
         print(test_tuple,type(test_tuple))

     pri('张三','it','长沙',60)

     输出: 张三
          (20,'it','长沙',60)  <class 'tuple'>

    def pri(name,**test_tuple):
             print(name)
             print(test_tuple,type(test_tuple))

         pri('张三',dic='it',address='长沙',age=60)   #后面的多个值必须以字典的实参传递给形参

         输出: 张三
              (20,'it','长沙',60)  <class 'tuple'>







